1) Da para usar o tailwindcss via CDN. Porém não é recomendado para ambiente de produção, apenas para de desenvolvimento.
2) E também é possível fazer a configuração que é o que vamos fazer aqui nesse guia simplificado.

Obs: O simbolo (=>) é usado para inserir comentários. Segue à direita o que está acontecendo a esquerda.

$ npm init 
=> irá gerar o package.json

$ npm install webpack webpack-cli postcss postcss-loader css-loader tailwindcss mini-css-extract-plugin 
=> instala as dependências do tailwindcss e do webpack. Irá criar o diretório node_modules e o arquivo package-lock.json com os detalhes das dependências

$ npm install html-webpack-plugin --save-dev
=> Dependência que cria um html minificado no diretótio  de distribuição

$ touch webpack.config.js  
=> cria o arquivo de configuração do webpack na raiz do projeto.

# Inserir o seguinte trecho de código no webpach.config.js
const path = require("path"); // utilitários para trabalhar com caminhos de arquivos e diretórios
const MiniCssExtractPlugin = require("mini-css-extract-plugin"); // produzir um arquivo css autônomo
const HtmlWebpackPlugin = require("html-webpack-plugin"); // plugin para gerar o html de saída

module.exports = {
  mode: "development", //Definir o modo de desenvolvimento
  entry: "./main.js", // Ponto de entrada é onde o webpack procura começar a construir os arquivos de saída
};

$ touch main.js 
=> Criação de arquivo js principal

$ touch styles.css // Arquivo que irá conter as diretivas do tailwindcss

# Inserir as diretivas do tailwindcss no arquivo styles.css criado anteriormente
@tailwind base;
@tailwind components;
@tailwind utilities;

# Importar arquivo styles.css no arquivo de js principal (main.js)
=> Usando a importação ES6 seguinte: import "./styles.css"
Lembrar de usar o ponto e barra e a extensão do  arquivo, se não não irá resolver o caminho


# Inserir o seguinte trecho de código no webpach.config.js após o entry-point
output:{
        filename:"main.js",
        path: path.resolve(__dirname,"./docs")
    },
      plugins: [
    new MiniCssExtractPlugin({
      filename: "styles.css",
    }),
    new HtmlWebpackPlugin({  // Adicione o plugin aqui
      template: "./src/pages/index.html", // Especifique o modelo HTML
      filename: "index.html", // Nome do arquivo de saída
      minify: {
        collapseWhitespace: true, // Minificar o HTML
        removeComments: true,
        removeRedundantAttributes: true,
        removeScriptTypeAttributes: true,
        removeStyleLinkTypeAttributes: true,
        useShortDoctype: true,
      },
    }),
  ],

# Inserir o seguinte trecho de código no webpach.config.js após o plugins
module:{
        rules:[
            {
                test:/\.css$/,
                use:[
                MiniCssExtractPlugin.loader,
                "css-loader",
                "postcss-loader"
            ]
            }
        ]
    }

# Atualizar o valor da propriedade script em package.json
"scripts": {
    "build": "webpack --config webpack.config.js",
    "watch": "webpack --watch"
  },
=> Script de compilação que pode ser chamado no terminal usando: npm run <nome>, em nosso caso seria npm run build 

# Criar o arquivo vazio postcss.config.js 

# Adicione o Tailwind CSS como um plugin no seu arquivo de configuração do PostCSS
module.exports = {
  plugins: {
    tailwindcss: {
      config: "./tailwind.config.js",
    },
  },
};


$ npx tailwindcss init
=> Gerar arquivo de configuração do tailwind

# Usar configuração padrão no tailwind.config.js (CJS)

$ npm run build
=> Para setar as configurações

$ npm run watch
=> Para assistir as mudanças
